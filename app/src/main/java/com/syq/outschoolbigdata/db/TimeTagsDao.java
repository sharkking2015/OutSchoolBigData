package com.syq.outschoolbigdata.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syq.outschoolbigdata.vo.orm.TimeTags;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TIME_TAGS".
*/
public class TimeTagsDao extends AbstractDao<TimeTags, Long> {

    public static final String TABLENAME = "TIME_TAGS";

    /**
     * Properties of entity TimeTags.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property OneDayTime = new Property(1, long.class, "oneDayTime", false, "ONE_DAY_TIME");
        public final static Property OneHourTime = new Property(2, long.class, "oneHourTime", false, "ONE_HOUR_TIME");
        public final static Property AnalysisVersion = new Property(3, int.class, "analysisVersion", false, "ANALYSIS_VERSION");
        public final static Property AnswerVersion = new Property(4, int.class, "answerVersion", false, "ANSWER_VERSION");
    };


    public TimeTagsDao(DaoConfig config) {
        super(config);
    }
    
    public TimeTagsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIME_TAGS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"ONE_DAY_TIME\" INTEGER NOT NULL ," + // 1: oneDayTime
                "\"ONE_HOUR_TIME\" INTEGER NOT NULL ," + // 2: oneHourTime
                "\"ANALYSIS_VERSION\" INTEGER NOT NULL ," + // 3: analysisVersion
                "\"ANSWER_VERSION\" INTEGER NOT NULL );"); // 4: answerVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIME_TAGS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TimeTags entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getOneDayTime());
        stmt.bindLong(3, entity.getOneHourTime());
        stmt.bindLong(4, entity.getAnalysisVersion());
        stmt.bindLong(5, entity.getAnswerVersion());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TimeTags entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getOneDayTime());
        stmt.bindLong(3, entity.getOneHourTime());
        stmt.bindLong(4, entity.getAnalysisVersion());
        stmt.bindLong(5, entity.getAnswerVersion());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public TimeTags readEntity(Cursor cursor, int offset) {
        TimeTags entity = new TimeTags( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // oneDayTime
            cursor.getLong(offset + 2), // oneHourTime
            cursor.getInt(offset + 3), // analysisVersion
            cursor.getInt(offset + 4) // answerVersion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TimeTags entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setOneDayTime(cursor.getLong(offset + 1));
        entity.setOneHourTime(cursor.getLong(offset + 2));
        entity.setAnalysisVersion(cursor.getInt(offset + 3));
        entity.setAnswerVersion(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TimeTags entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TimeTags entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
