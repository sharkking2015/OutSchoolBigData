package com.syq.outschoolbigdata.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syq.outschoolbigdata.vo.orm.LocalQuestionInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_QUESTION_INFO".
*/
public class LocalQuestionInfoDao extends AbstractDao<LocalQuestionInfo, Long> {

    public static final String TABLENAME = "LOCAL_QUESTION_INFO";

    /**
     * Properties of entity LocalQuestionInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Guid = new Property(1, String.class, "guid", false, "GUID");
        public final static Property QuestionNo = new Property(2, String.class, "questionNo", false, "QUESTION_NO");
        public final static Property Result = new Property(3, int.class, "result", false, "RESULT");
        public final static Property TotalScore = new Property(4, String.class, "totalScore", false, "TOTAL_SCORE");
        public final static Property UserScore = new Property(5, String.class, "userScore", false, "USER_SCORE");
        public final static Property UserAnswer = new Property(6, String.class, "userAnswer", false, "USER_ANSWER");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
        public final static Property CreateTime = new Property(8, String.class, "createTime", false, "CREATE_TIME");
        public final static Property IsUploaded = new Property(9, boolean.class, "isUploaded", false, "IS_UPLOADED");
        public final static Property UploadTime = new Property(10, String.class, "uploadTime", false, "UPLOAD_TIME");
    };


    public LocalQuestionInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LocalQuestionInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_QUESTION_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"GUID\" TEXT," + // 1: guid
                "\"QUESTION_NO\" TEXT," + // 2: questionNo
                "\"RESULT\" INTEGER NOT NULL ," + // 3: result
                "\"TOTAL_SCORE\" TEXT," + // 4: totalScore
                "\"USER_SCORE\" TEXT," + // 5: userScore
                "\"USER_ANSWER\" TEXT," + // 6: userAnswer
                "\"TYPE\" TEXT," + // 7: type
                "\"CREATE_TIME\" TEXT," + // 8: createTime
                "\"IS_UPLOADED\" INTEGER NOT NULL ," + // 9: isUploaded
                "\"UPLOAD_TIME\" TEXT);"); // 10: uploadTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_QUESTION_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalQuestionInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(2, guid);
        }
 
        String questionNo = entity.getQuestionNo();
        if (questionNo != null) {
            stmt.bindString(3, questionNo);
        }
        stmt.bindLong(4, entity.getResult());
 
        String totalScore = entity.getTotalScore();
        if (totalScore != null) {
            stmt.bindString(5, totalScore);
        }
 
        String userScore = entity.getUserScore();
        if (userScore != null) {
            stmt.bindString(6, userScore);
        }
 
        String userAnswer = entity.getUserAnswer();
        if (userAnswer != null) {
            stmt.bindString(7, userAnswer);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(9, createTime);
        }
        stmt.bindLong(10, entity.getIsUploaded() ? 1L: 0L);
 
        String uploadTime = entity.getUploadTime();
        if (uploadTime != null) {
            stmt.bindString(11, uploadTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalQuestionInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(2, guid);
        }
 
        String questionNo = entity.getQuestionNo();
        if (questionNo != null) {
            stmt.bindString(3, questionNo);
        }
        stmt.bindLong(4, entity.getResult());
 
        String totalScore = entity.getTotalScore();
        if (totalScore != null) {
            stmt.bindString(5, totalScore);
        }
 
        String userScore = entity.getUserScore();
        if (userScore != null) {
            stmt.bindString(6, userScore);
        }
 
        String userAnswer = entity.getUserAnswer();
        if (userAnswer != null) {
            stmt.bindString(7, userAnswer);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(9, createTime);
        }
        stmt.bindLong(10, entity.getIsUploaded() ? 1L: 0L);
 
        String uploadTime = entity.getUploadTime();
        if (uploadTime != null) {
            stmt.bindString(11, uploadTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LocalQuestionInfo readEntity(Cursor cursor, int offset) {
        LocalQuestionInfo entity = new LocalQuestionInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // guid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // questionNo
            cursor.getInt(offset + 3), // result
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // totalScore
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userScore
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userAnswer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // createTime
            cursor.getShort(offset + 9) != 0, // isUploaded
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // uploadTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalQuestionInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setGuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQuestionNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResult(cursor.getInt(offset + 3));
        entity.setTotalScore(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserScore(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserAnswer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsUploaded(cursor.getShort(offset + 9) != 0);
        entity.setUploadTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalQuestionInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalQuestionInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
