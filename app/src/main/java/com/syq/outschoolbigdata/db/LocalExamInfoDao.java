package com.syq.outschoolbigdata.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syq.outschoolbigdata.vo.orm.LocalExamInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_EXAM_INFO".
*/
public class LocalExamInfoDao extends AbstractDao<LocalExamInfo, String> {

    public static final String TABLENAME = "LOCAL_EXAM_INFO";

    /**
     * Properties of entity LocalExamInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Guid = new Property(0, String.class, "guid", true, "GUID");
        public final static Property Paperid = new Property(1, String.class, "paperid", false, "PAPERID");
        public final static Property ShortPaperId = new Property(2, String.class, "shortPaperId", false, "SHORT_PAPER_ID");
        public final static Property Userid = new Property(3, String.class, "userid", false, "USERID");
        public final static Property XjNum = new Property(4, String.class, "xjNum", false, "XJ_NUM");
        public final static Property Batch = new Property(5, int.class, "batch", false, "BATCH");
        public final static Property CreateTime = new Property(6, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UploadTime = new Property(7, String.class, "uploadTime", false, "UPLOAD_TIME");
        public final static Property Mark = new Property(8, String.class, "mark", false, "MARK");
        public final static Property Score = new Property(9, String.class, "score", false, "SCORE");
        public final static Property PaperType = new Property(10, String.class, "paperType", false, "PAPER_TYPE");
        public final static Property IsUploaded = new Property(11, boolean.class, "isUploaded", false, "IS_UPLOADED");
    };


    public LocalExamInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LocalExamInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_EXAM_INFO\" (" + //
                "\"GUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: guid
                "\"PAPERID\" TEXT," + // 1: paperid
                "\"SHORT_PAPER_ID\" TEXT," + // 2: shortPaperId
                "\"USERID\" TEXT," + // 3: userid
                "\"XJ_NUM\" TEXT," + // 4: xjNum
                "\"BATCH\" INTEGER NOT NULL ," + // 5: batch
                "\"CREATE_TIME\" TEXT," + // 6: createTime
                "\"UPLOAD_TIME\" TEXT," + // 7: uploadTime
                "\"MARK\" TEXT," + // 8: mark
                "\"SCORE\" TEXT," + // 9: score
                "\"PAPER_TYPE\" TEXT," + // 10: paperType
                "\"IS_UPLOADED\" INTEGER NOT NULL );"); // 11: isUploaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_EXAM_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalExamInfo entity) {
        stmt.clearBindings();
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(1, guid);
        }
 
        String paperid = entity.getPaperid();
        if (paperid != null) {
            stmt.bindString(2, paperid);
        }
 
        String shortPaperId = entity.getShortPaperId();
        if (shortPaperId != null) {
            stmt.bindString(3, shortPaperId);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(4, userid);
        }
 
        String xjNum = entity.getXjNum();
        if (xjNum != null) {
            stmt.bindString(5, xjNum);
        }
        stmt.bindLong(6, entity.getBatch());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(7, createTime);
        }
 
        String uploadTime = entity.getUploadTime();
        if (uploadTime != null) {
            stmt.bindString(8, uploadTime);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(9, mark);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(10, score);
        }
 
        String paperType = entity.getPaperType();
        if (paperType != null) {
            stmt.bindString(11, paperType);
        }
        stmt.bindLong(12, entity.getIsUploaded() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalExamInfo entity) {
        stmt.clearBindings();
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(1, guid);
        }
 
        String paperid = entity.getPaperid();
        if (paperid != null) {
            stmt.bindString(2, paperid);
        }
 
        String shortPaperId = entity.getShortPaperId();
        if (shortPaperId != null) {
            stmt.bindString(3, shortPaperId);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(4, userid);
        }
 
        String xjNum = entity.getXjNum();
        if (xjNum != null) {
            stmt.bindString(5, xjNum);
        }
        stmt.bindLong(6, entity.getBatch());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(7, createTime);
        }
 
        String uploadTime = entity.getUploadTime();
        if (uploadTime != null) {
            stmt.bindString(8, uploadTime);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(9, mark);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(10, score);
        }
 
        String paperType = entity.getPaperType();
        if (paperType != null) {
            stmt.bindString(11, paperType);
        }
        stmt.bindLong(12, entity.getIsUploaded() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LocalExamInfo readEntity(Cursor cursor, int offset) {
        LocalExamInfo entity = new LocalExamInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // guid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // paperid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shortPaperId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // xjNum
            cursor.getInt(offset + 5), // batch
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // uploadTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mark
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // score
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // paperType
            cursor.getShort(offset + 11) != 0 // isUploaded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalExamInfo entity, int offset) {
        entity.setGuid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPaperid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShortPaperId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setXjNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBatch(cursor.getInt(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUploadTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setScore(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPaperType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsUploaded(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(LocalExamInfo entity, long rowId) {
        return entity.getGuid();
    }
    
    @Override
    public String getKey(LocalExamInfo entity) {
        if(entity != null) {
            return entity.getGuid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
