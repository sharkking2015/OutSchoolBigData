package com.syq.outschoolbigdata.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syq.outschoolbigdata.vo.orm.TiInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TI_INFO".
*/
public class TiInfoDao extends AbstractDao<TiInfo, Long> {

    public static final String TABLENAME = "TI_INFO";

    /**
     * Properties of entity TiInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property TiId = new Property(1, String.class, "tiId", false, "TI_ID");
        public final static Property TiName = new Property(2, String.class, "tiName", false, "TI_NAME");
        public final static Property TiVersion = new Property(3, String.class, "tiVersion", false, "TI_VERSION");
    };


    public TiInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TiInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TI_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TI_ID\" TEXT," + // 1: tiId
                "\"TI_NAME\" TEXT," + // 2: tiName
                "\"TI_VERSION\" TEXT);"); // 3: tiVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TI_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TiInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String tiId = entity.getTiId();
        if (tiId != null) {
            stmt.bindString(2, tiId);
        }
 
        String tiName = entity.getTiName();
        if (tiName != null) {
            stmt.bindString(3, tiName);
        }
 
        String tiVersion = entity.getTiVersion();
        if (tiVersion != null) {
            stmt.bindString(4, tiVersion);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TiInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String tiId = entity.getTiId();
        if (tiId != null) {
            stmt.bindString(2, tiId);
        }
 
        String tiName = entity.getTiName();
        if (tiName != null) {
            stmt.bindString(3, tiName);
        }
 
        String tiVersion = entity.getTiVersion();
        if (tiVersion != null) {
            stmt.bindString(4, tiVersion);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public TiInfo readEntity(Cursor cursor, int offset) {
        TiInfo entity = new TiInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tiId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tiName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // tiVersion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TiInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTiId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTiName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTiVersion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TiInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TiInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
